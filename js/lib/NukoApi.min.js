"use strict";import{NukoEtc}from"./NukoEtc.min.js";const NUKOAPI="https://api.nuko.town/";export class NukoApi{static async getActiveUsers(address){if($("#swapSwitch").prop("checked")){const digest=await NukoEtc.sha256(address);let param={hash:digest};NukoEtc.postData(NUKOAPI+"v1/activeUsers",param).then(data=>{$("#activeUsers").text(data.activeUsers)})}else fetch(NUKOAPI+"v1/activeUsers").then(response=>response.json()).then(data=>{$("#activeUsers").text(data.activeUsers)})}static async getCommunityBalance(address,nuko,updateCommunityBalance){if($("#swapSwitch").prop("checked")){const digest=await NukoEtc.sha256(address);let param={hash:digest,jpyc:1e-18*nuko.balanceJPYC,usdc:1e-6*nuko.balanceUSDC,upper:nuko.upperThreshold,lower:nuko.lowerThreshold};NukoEtc.postData(NUKOAPI+"v1/communityBalance",param).then(data=>{updateCommunityBalance(data,nuko.jpyusd)})}else fetch(NUKOAPI+"v1/communityBalance").then(response=>response.json()).then(data=>{updateCommunityBalance(data,nuko.jpyusd)})}static async getRateLog(){let log;return await fetch(NUKOAPI+"v1/rateLog/").then(response=>response.json()).then(data=>{log=data}),log}static async getSMA(duration){let ret;return await fetch(NUKOAPI+"v1/sma/"+duration.toString()).then(response=>response.json()).then(data=>{ret=data.sma}),ret}static async getLeaderboard(){let ret;return await fetch(NUKOAPI+"v1/leaderboard/").then(response=>response.json()).then(data=>{ret=data}),ret}static async postWin(date,address,usdc,jpyc,total,config){const digest=await NukoEtc.sha256(address);let param={date:date,hash:digest,jpyc:jpyc,usdc:usdc,total:total,config:config};console.log(param),await NukoEtc.postData(NUKOAPI+"v1/winner",param).then(data=>{console.log(data)})}}